# GitHub Actions workflow for deploying EUDIStack Wallet UI to AWS Amplify
# This workflow builds the Angular application and deploys it to AWS Amplify
# Triggered on pushes to the main branch
name: Deploy to AWS Amplify
on:
  push:
    branches:
      - main
      - release/**

# Required permissions for the workflow
permissions:
  contents: write

jobs:
  deploy:
    name: Deploy to AWS Amplify
    runs-on: ubuntu-latest
    environment: stg
    # Environment variables used throughout the workflow
    # These are available to all steps in the job
    env:
      AMPLIFY_APP_NAME: wallet-ui  # Name of the AWS Amplify app to deploy to
      BRANCH_NAME: main            # Target branch for deployment
    steps:
      # Step 1: Checkout the repository code
      # This action downloads the repository content to the runner
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Setup Node.js environment
      # Installs Node.js 22 and configures npm cache for faster builds
      - name: Setup Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'
          cache-dependency-path: package-lock.json

      # Step 3: Install project dependencies
      # Uses npm ci for clean, reproducible installs based on package-lock.json
      - name: Install dependencies
        run: npm ci

      # Step 4: Build the Angular application
      # Compiles the app in production mode and outputs to dist/out directory
      - name: Npm Build
        run: npm run build -- --output-path=./dist/out --configuration "deployment"

      # Step 4.1: Generate runtime-config.json to inject runtime variables
      # Creates a JSON file with environment-specific settings for the app
      - name: Generate runtime-config.json
        run: |
          mkdir -p dist/out/assets
          cat > dist/out/assets/runtime-config.json << 'EOF'
          {
            "FAVICON_SRC": "${{ vars.FAVICON_SRC }}",
            "IAM_EXTERNAL_URL": "${{ vars.IAM_EXTERNAL_URL }}",
            "LOGO_SRC": "${{ vars.LOGO_SRC }}",
            "PRIMARY": "${{ vars.PRIMARY }}",
            "PRIMARY_CONTRAST": "${{ vars.PRIMARY_CONTRAST }}",
            "SECONDARY": "${{ vars.SECONDARY }}",
            "SECONDARY_CONTRAST": "${{ vars.SECONDARY_CONTRAST }}",
            "WALLET_API_EXTERNAL_URL": "${{ vars.WALLET_API_EXTERNAL_URL }}",
            "WALLET_API_WEBSOCKET_EXTERNAL_URL": "${{ vars.WALLET_API_WEBSOCKET_EXTERNAL_URL }}"
            "LOGS_ENABLED": "${{ vars.LOGS_ENABLED }}",
          }
          EOF

      # Step 5: Create deployment zip file
      # Creates a zip archive of the built application for AWS Amplify deployment
      # The zip contains all the compiled static files
      - name: Create Zip File
        run: |
          cd dist/out
          zip -r ../out.zip .
          echo "ZIP_FILE=dist/out.zip" >> $GITHUB_ENV

      # Step 6: Configure AWS CLI credentials
      # Sets up AWS authentication using stored secrets for API access
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}

      # Step 7: Dynamically extract Amplify App ID
      # Queries AWS Amplify to find the app ID based on the app name
      # This makes the workflow flexible and removes hardcoded app IDs
      - name: Extract Amplify App ID
        run: |
          AMPLIFY_APP_ID=$(aws amplify list-apps --query "apps[?name=='${{ env.AMPLIFY_APP_NAME }}'].appId" --output text)
          echo "AMPLIFY_APP_ID=$AMPLIFY_APP_ID" >> $GITHUB_ENV
          echo "Found App ID: $AMPLIFY_APP_ID for app: ${{ env.AMPLIFY_APP_NAME }}"

      # Step 8: Create AWS Amplify Deployment
      # Initiates a new deployment and extracts the upload URL and job ID
      - name: Create AWS Amplify Deployment
        run: |
          DEPLOYMENT_OUTPUT=$(aws amplify create-deployment --app-id ${{ env.AMPLIFY_APP_ID }} --branch-name ${{ env.BRANCH_NAME }} --output json)
          ZIP_UPLOAD_URL=$(echo $DEPLOYMENT_OUTPUT | jq -r '.zipUploadUrl')
          JOB_ID=$(echo $DEPLOYMENT_OUTPUT | jq -r '.jobId')
          echo "ZIP_UPLOAD_URL=$ZIP_UPLOAD_URL" >> $GITHUB_ENV
          echo "JOB_ID=$JOB_ID" >> $GITHUB_ENV
          echo "Deployment created with Job ID: $JOB_ID and Upload URL: $ZIP_UPLOAD_URL"

      # Step 9: Upload zip file to AWS Amplify
      # Uses curl to upload the built zip file to the Amplify deployment URL
      - name: Upload Deployment Zip
        run: |
          echo "Uploading zip file to AWS Amplify..."
          curl -X PUT --upload-file ${{ env.ZIP_FILE }} "${{ env.ZIP_UPLOAD_URL }}"

      # Step 10: Start AWS Amplify Deployment
      # Triggers the deployment process using the job ID
      - name: Start AWS Amplify Deployment
        run: |
          echo "Starting deployment for Job ID: ${{ env.JOB_ID }}"
          aws amplify start-deployment --app-id ${{ env.AMPLIFY_APP_ID }} --branch-name ${{ env.BRANCH_NAME }} --job-id ${{ env.JOB_ID }}
