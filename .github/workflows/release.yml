name: Release
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]

permissions:
  contents: write

jobs:
  release-snapshot:
    if: github.event_name == 'pull_request'
    name: release-snapshot
    runs-on: ubuntu-latest
    environment: local
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get Project Version
        id: get_version
        run: echo "VERSION=$(jq -r '.version' package.json)" >> $GITHUB_ENV

      - name: Build and Push docker image
        run: |
          PROJECT_NAME=$(jq -r '.name' package.json)
          IMAGE_TAG="$PROJECT_NAME:v$VERSION$SUFFIX"
          docker build . --file Dockerfile --tag $DOCKER_HUB_CLIENT_NAME/$IMAGE_TAG
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
          docker push $DOCKER_HUB_CLIENT_NAME/$IMAGE_TAG
        env:
          VERSION: ${{ env.VERSION }}
          SUFFIX: -snapshot
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_TOKEN }}
          DOCKER_HUB_CLIENT_NAME: in2workspace

  release:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    name: release
    runs-on: ubuntu-latest
    environment: local
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get Project Version
        id: get_version
        run: echo "VERSION=$(jq -r '.version' package.json)" >> $GITHUB_ENV

      - name: Build and Push docker image
        run: |
          PROJECT_NAME=$(jq -r '.name' package.json)
          IMAGE_TAG="$PROJECT_NAME:v$VERSION"
          docker build . --file Dockerfile --tag $DOCKER_HUB_CLIENT_NAME/$IMAGE_TAG
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
          docker push $DOCKER_HUB_CLIENT_NAME/$IMAGE_TAG
        env:
          VERSION: ${{ env.VERSION }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_TOKEN }}
          DOCKER_HUB_CLIENT_NAME: in2workspace

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ env.VERSION }}"
          release_name: "v${{ env.VERSION }}"
          body: "Release of version v${{ env.VERSION }}"
          draft: false
          prerelease: true
